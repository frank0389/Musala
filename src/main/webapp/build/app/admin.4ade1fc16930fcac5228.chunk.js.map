{"version":3,"file":"app/admin.4ade1fc16930fcac5228.chunk.js","mappings":"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","sources":["webpack://webapp/./src/app/components/dialogs/confirm/index.js","webpack://webapp/./src/app/components/dialogs/select/index.js","webpack://webapp/./src/app/components/table/search/index.js","webpack://webapp/./src/app/modules/admin/components/layout/index.js","webpack://webapp/./src/app/modules/admin/pages/user/new/index.js","webpack://webapp/./src/app/modules/admin/pages/user/edit/index.js","webpack://webapp/./src/app/modules/admin/pages/user/view/index.js","webpack://webapp/./src/app/modules/admin/core/rutes/index.js"],"sourcesContent":["import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nconst ConfirmDialog = (props) => {\r\n    const {onClose, onAccept, description, title, open, cancelButtonText, acceptButtonText, ...other } = props;\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const handleAccept = () => {\r\n        onAccept();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {description}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} autoFocus>{cancelButtonText}</Button>\r\n                <Button onClick={handleAccept} >\r\n                {acceptButtonText}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\nexport default ConfirmDialog;","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport Radio from '@mui/material/Radio';\r\n\r\nconst SelectOptionDialog = (props) => {\r\n    const {onCancel, onAccept, valueProp,  options, title, open, cancelButtonText, acceptButtonText, ...other } = props;\r\n\r\n    const [value, setValue] = React.useState(valueProp);\r\n    const radioGroupRef = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setValue(valueProp);\r\n        }\r\n    }, [valueProp, open]);\r\n\r\n    const handleEntering = () => {\r\n        if (radioGroupRef.current != null) {\r\n            radioGroupRef.current.focus();\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        onCancel();\r\n    };\r\n\r\n    const handleAccept = () => {\r\n        onAccept(value);\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\r\n            maxWidth=\"xs\"\r\n            TransitionProps={{ onEntering: handleEntering }}\r\n            open={open}\r\n            {...other}\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                <RadioGroup\r\n                    ref={radioGroupRef}\r\n                    aria-label=\"ringtone\"\r\n                    name=\"ringtone\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                >\r\n                    {options.map((option) => (\r\n                        <FormControlLabel\r\n                            value={option}\r\n                            key={option}\r\n                            control={<Radio />}\r\n                            label={option}\r\n                        />\r\n                    ))}\r\n                </RadioGroup>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={handleCancel}>{cancelButtonText}</Button>\r\n                <Button onClick={handleAccept}>{acceptButtonText}</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\nexport default SelectOptionDialog;","import {alpha, styled} from \"@mui/material/styles\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as React from \"react\";\r\nimport {debounce} from \"lodash\";\r\nimport Box from \"@mui/material/Box\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {FilterAlt} from \"@mui/icons-material\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport SelectOptionDialog from \"../../dialogs/select\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst StyledSearch = styled('div')(({theme}) => ({\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(3),\r\n        width: 'auto',\r\n    },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({theme}) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({theme}) => ({\r\n    color: 'inherit',\r\n    '& .MuiInputBase-input': {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: '20ch',\r\n        },\r\n    },\r\n}));\r\n\r\nconst Search = (props) => {\r\n    const { onSearchHandler, options} = props;\r\n\r\n    const {t} = useTranslation('search');\r\n    const [openDialog, setOpenDialog] = React.useState(false);\r\n    const [selectedOption, setSelectedOption] = React.useState(options.length?options[0]:'');\r\n\r\n    const handleSearch = debounce((event) => {\r\n        onSearchHandler(event.target.value, selectedOption);\r\n    }, 500);\r\n\r\n    const handleOption = () => {\r\n           setOpenDialog(true);\r\n    }\r\n\r\n    const handleCancelButton = () => {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const handleAcceptButton = (value) =>  {\r\n        setSelectedOption(value);\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ display: \"flex\" }}>\r\n            <SelectOptionDialog onCancel={handleCancelButton} onAccept={handleAcceptButton}  valueProp={selectedOption}\r\n                                options={options} title={t('dialog.title')} open={openDialog}\r\n                                cancelButtonText={t('dialog.cancelButtonText')} acceptButtonText={t('dialog.acceptButtonText')}></SelectOptionDialog>\r\n                <StyledSearch>\r\n                    <SearchIconWrapper>\r\n                        <SearchIcon/>\r\n                    </SearchIconWrapper>\r\n                    <StyledInputBase\r\n                        placeholder={t(\"placeholder\")+\" \"+selectedOption}\r\n                        inputProps={{'aria-label': 'search'}}\r\n                        onChange={handleSearch}\r\n                    />\r\n                </StyledSearch>\r\n                <Tooltip title=\"Filter\">\r\n                    <IconButton onClick={handleOption}>\r\n                        <FilterAlt/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n        </Box>\r\n    );\r\n\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport Container from \"@mui/material/Container\";\r\nimport {Outlet} from \"react-router-dom\";\r\n\r\n\r\nconst  AdminLayout = (props) => {\r\n    return (\r\n        <Container maxWidth={false}>\r\n            <Outlet/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport  default AdminLayout;","import React, {useEffect, useState} from 'react';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {\r\n    Alert,\r\n    CardContent,\r\n    Chip,\r\n    Collapse,\r\n    FormControl, FormHelperText, IconButton,\r\n    InputLabel,\r\n    Select, Stack,\r\n    TextField\r\n} from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {\r\n    GroupAddRounded,\r\n} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Loading from \"../../../../../components/loading\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport {\r\n    createSuccessSelector,\r\n    errorSelector,\r\n    getRoles,\r\n    rolesSelector,\r\n    createUser,\r\n    statusSelector, reset\r\n} from \"../../../core/reducers/users\";\r\nimport {getIconBy} from \"../../../../../core/utils/fun\";\r\nimport {useTheme} from \"@mui/material/styles\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {useNavigate} from \"react-router\";\r\n\r\n// import {use} from \"i18next\";\r\n\r\nfunction getStyles(name, personName, theme) {\r\n    return {\r\n        fontWeight:\r\n            personName.indexOf(name) === -1\r\n                ? theme.typography.fontWeightRegular\r\n                : theme.typography.fontWeightMedium,\r\n    };\r\n}\r\n\r\n\r\nconst NewUser = (props) => {\r\n\r\n    const {t} = useTranslation(\"newu\");\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const theme = useTheme();\r\n\r\n    const [firstNameInputError, setFirstNameInputError] = useState({error: false, message: ''});\r\n    const [selectedRoles, setSelectedRoles] = useState([]);\r\n    const [lastNameInputError, setLastNameInputError] = useState({error: false, message: ''});\r\n    const [rolesInputError, setRolesInputError] = useState({error: false, message: ''});\r\n    const [langKeyInputError, setLangKeyInputError] = useState({error: false, message: ''});\r\n    const [userNameInputError, setUserNameInputError] = useState({error: false, message: ''});\r\n\r\n    const languages = ['es', 'en'];\r\n    const [user, setUser] = useState({firstName: '', lastName: '', userName: '', roles: [], langKey: ''});\r\n\r\n    const error = useSelector(errorSelector);\r\n    const status = useSelector(statusSelector);\r\n    const createSuccess = useSelector(createSuccessSelector);\r\n    const roles = useSelector(rolesSelector);\r\n\r\n    useEffect(() => {\r\n        dispatch(getRoles());\r\n    }, [])\r\n\r\n    const handleFirstName = (event) => {\r\n        setFirstNameInputError({error: false, message: ''});\r\n\r\n        setUser({\r\n            ...user,\r\n            firstName: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleLastName = (event) => {\r\n        setLastNameInputError({error: false, message: ''});\r\n        setUser({\r\n            ...user,\r\n            lastName: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleUserName = (event) => {\r\n        setUserNameInputError({error: false, message: ''});\r\n\r\n        setUser({\r\n            ...user,\r\n            userName: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleLangKey = (event) => {\r\n        setLangKeyInputError({error: false, message: ''});\r\n\r\n        setUser({\r\n            ...user,\r\n            langKey: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSelectedRole = (event) => {\r\n        setRolesInputError({error: false, message: ''});\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        setSelectedRoles(\r\n            typeof value === 'string' ? value.split(',') : value,\r\n        );\r\n        setUser({\r\n            ...user,\r\n            roles: typeof value === 'string' ? value.split(',') : value,\r\n        });\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        navigate(\"/admin/users\");\r\n    }\r\n\r\n    const handleAccept = () => {\r\n\r\n        if (user.firstName == null ||\r\n            user.firstName == undefined ||\r\n            user.firstName.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: true, message: t('requiredError')});\r\n        } else if (user.lastName == null ||\r\n            user.lastName == undefined ||\r\n            user.lastName.length == 0) {\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setLastNameInputError({error: true, message: t('requiredError')});\r\n\r\n        } else if (user.userName == null ||\r\n            user.userName == undefined ||\r\n            user.userName.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setUserNameInputError({error: true, message: t('requiredError')});\r\n\r\n        }  else if (user.langKey == null ||\r\n            user.langKey == undefined ||\r\n            user.langKey.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: true, message: t('requiredError')});\r\n\r\n        } else if (user.roles.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setRolesInputError({error: true, message: t('requiredError')});\r\n        } else {\r\n             //clear fields\r\n            setUser({  firstName: '', lastName: '', userName: '', roles: [], langKey: ''})\r\n\r\n            //dispatch\r\n            dispatch(createUser({\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                userName: user.userName,\r\n                roles: user.roles,\r\n                langKey: user.langKey\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n    if(roles.length === 0 ) {\r\n        return <Loading open={true} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <Loading open={status === 'loading' ? true : false}></Loading>\r\n            <Collapse in={status === 'failed'}>\r\n                <Alert color=\"error\" severity=\"error\"\r\n                       sx={{mb: 2, backgroundColor: \"transparent\"}}\r\n                >\r\n                    {t(\"errorMessage\") + \".\" + error}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={createSuccess === true}>\r\n                <Alert color=\"success\" severity=\"success\"\r\n                       sx={{mb: 2, backgroundColor: \"transparent\"}}\r\n                >\r\n                    {t(\"successMessage\")}\r\n                </Alert>\r\n            </Collapse>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Paper>\r\n                        <Toolbar>\r\n                            <IconButton\r\n                                edge=\"start\" color=\"inherit\" aria-label=\"Add User\" sx={{mr: 0.5}}\r\n                            >\r\n                                <GroupAddRounded/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                                {t('title')}\r\n                            </Typography>\r\n                        </Toolbar>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        error={firstNameInputError.error}\r\n                                        helperText={firstNameInputError.message}\r\n                                        autoComplete=\"given-name\"\r\n                                        name=\"firstName\"\r\n                                        fullWidth\r\n                                        id=\"firstName\"\r\n                                        label={t('firstName')}\r\n                                        onChange={handleFirstName}\r\n                                        value={user.firstName}\r\n                                        autoFocus\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        error={lastNameInputError.error}\r\n                                        helperText={lastNameInputError.message}\r\n                                        fullWidth\r\n                                        id=\"lastName\"\r\n                                        label={t('lastName')}\r\n                                        onChange={handleLastName}\r\n                                        value={user.lastName}\r\n                                        name=\"lastName\"\r\n                                        autoComplete=\"family-name\"\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                 <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        error={userNameInputError.error}\r\n                                        helperText={userNameInputError.message}\r\n                                        fullWidth\r\n                                        id=\"user\"\r\n                                        label={t('userName')}\r\n                                        name=\"user\"\r\n                                        autoComplete=\"userName\"\r\n                                        onChange={handleUserName}\r\n                                        value={user.userName}\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"language-label\">{t('language')}</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"language-label\"\r\n                                            id=\"language\"\r\n                                            error={langKeyInputError.error}\r\n                                            value={user.langKey}\r\n                                            label={t('language')}\r\n                                            variant=\"standard\"\r\n                                            onChange={handleLangKey}\r\n                                        >\r\n                                            {\r\n                                                languages.map(lang => (\r\n                                                    <MenuItem key={lang} value={lang}>\r\n                                                        {lang} </MenuItem>\r\n                                                ))\r\n\r\n                                            }\r\n                                        </Select>\r\n                                        <FormHelperText>{langKeyInputError.message}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <FormControl sx={{width: '100%'}}>\r\n                                        <InputLabel id=\"select-role-label\">{t(\"roles\")} </InputLabel>\r\n                                        <Select\r\n                                            id=\"multiple\"\r\n                                            multiple\r\n                                            error={rolesInputError.error}\r\n                                            value={user.roles}\r\n                                            onChange={handleSelectedRole}\r\n                                            variant=\"standard\"\r\n                                            renderValue={(selected) => (\r\n                                                <Box sx={{\r\n                                                    display: 'flex',\r\n                                                    border: 'none',\r\n                                                    flexWrap: 'wrap',\r\n                                                    gap: 0.5\r\n                                                }}>\r\n                                                    {selected.map((value) => (\r\n                                                        <Chip\r\n                                                            key={value}\r\n                                                            icon={getIconBy(value)}\r\n                                                            variant=\"outlined\"\r\n                                                            label={value}\r\n                                                        />\r\n                                                    ))}\r\n                                                </Box>\r\n                                            )}\r\n                                        >\r\n                                            {roles.map((role) => (\r\n                                                <MenuItem\r\n                                                    key={role.id}\r\n                                                    value={role.name}\r\n                                                    style={getStyles(role.name, selectedRoles, theme)}\r\n                                                >\r\n                                                    {role.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                        </Select>\r\n                                        <FormHelperText>{rolesInputError.message}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                        <Stack direction=\"row\" spacing={2}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleCancel}\r\n                            >\r\n                                {t('cancelButtonText')}\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleAccept}\r\n                            >\r\n                                {t('acceptButtonText')}\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nexport default NewUser;","import React, {useEffect, useState} from 'react';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {\r\n    Alert,\r\n    CardContent,\r\n    Chip,\r\n    Collapse,\r\n    FormControl, FormHelperText, IconButton,\r\n    InputLabel,\r\n    Select, Stack,\r\n    TextField\r\n} from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {\r\n    AccountBox,\r\n} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Loading from \"../../../../../components/loading\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport {\r\n    editedSuccessSelector,\r\n    errorSelector,\r\n    getRoles,\r\n    rolesSelector,\r\n    editUser,\r\n    statusSelector,\r\n    getUser,\r\n    userSelector\r\n} from \"../../../core/reducers/users\";\r\nimport {getIconBy} from \"../../../../../core/utils/fun\";\r\nimport {useTheme} from \"@mui/material/styles\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {useNavigate, useParams} from \"react-router\";\r\n\r\nfunction getStyles(name, personName, theme) {\r\n    return {\r\n        fontWeight:\r\n            personName.indexOf(name) === -1\r\n                ? theme.typography.fontWeightRegular\r\n                : theme.typography.fontWeightMedium,\r\n    };\r\n}\r\n\r\n\r\nconst EditUser = (props) => {\r\n\r\n    const {t} = useTranslation(\"editu\");\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const {userName} = useParams();\r\n\r\n    const [langKeyInputError, setLangKeyInputError] = useState({error: false, message: ''});\r\n    const [userNameInputError, setUserNameInputError] = useState({error: false, message: ''});\r\n    const [firstNameInputError, setFirstNameInputError] = useState({error: false, message: ''});\r\n    const [lastNameInputError, setLastNameInputError] = useState({error: false, message: ''});\r\n    const [rolesInputError, setRolesInputError] = useState({error: false, message: ''});\r\n\r\n    const [selectedRoles, setSelectedRoles] = useState([]);\r\n\r\n    const [user, setUser] = useState(null);\r\n    const languages = ['es', 'en'];\r\n\r\n    const dispatch = useDispatch();\r\n    const editedSuccess = useSelector(editedSuccessSelector);\r\n    const status = useSelector(statusSelector);\r\n    const currentUser = useSelector(userSelector);\r\n    const error = useSelector(errorSelector);\r\n    const roles = useSelector(rolesSelector);\r\n\r\n    useEffect(() => {\r\n        dispatch(getRoles())\r\n        dispatch(getUser(userName))\r\n    }, [userName])\r\n\r\n    //This useeffect is for update user attr\r\n    useEffect(() => {\r\n      if(currentUser != null)  {\r\n        setUser(currentUser);\r\n      \r\n    }\r\n       \r\n   }, [currentUser])\r\n\r\n\r\n    const handleFirstName = (event) => {\r\n        setFirstNameInputError({error: false, message: ''});\r\n\r\n        setUser({\r\n            ...user,\r\n            firstName: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleLastName = (event) => {\r\n        setLastNameInputError({error: false, message: ''});\r\n        setUser({\r\n            ...user,\r\n            lastName: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleUserName = (event) => {\r\n        setUserNameInputError({error: false, message: ''});\r\n\r\n        setUser({\r\n            ...user,\r\n            userName: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleLangKey = (event) => {\r\n        setLangKeyInputError({error: false, message: ''});\r\n\r\n        setUser({\r\n            ...user,\r\n            langKey: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSelectedRole = (event) => {\r\n        setRolesInputError({error: false, message: ''});\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        setSelectedRoles(\r\n            typeof value === 'string' ? value.split(',') : value,\r\n        );\r\n        setUser({\r\n            ...user,\r\n            roles: typeof value === 'string' ? value.split(',') : value,\r\n        });\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        navigate(\"/admin/users\");\r\n    }\r\n\r\n    \r\n\r\n    const handleAccept = () => {\r\n\r\n        if (user.firstName == null ||\r\n            user.firstName == undefined ||\r\n            user.firstName.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: true, message: t('requiredError')});\r\n        } else if (user.lastName == null ||\r\n            user.lastName == undefined ||\r\n            user.lastName.length == 0) {\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setLastNameInputError({error: true, message: t('requiredError')});\r\n\r\n        } else if(user.userName == null ||\r\n            user.userName == undefined ||\r\n            user.userName.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setUserNameInputError({error: true, message: t('requiredError')});\r\n\r\n        } else if (user.langKey == null ||\r\n            user.langKey == undefined ||\r\n            user.langKey.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setRolesInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: true, message: t('requiredError')});\r\n\r\n        } else if (user.roles.length == 0) {\r\n            setLastNameInputError({error: false, message: ''});\r\n            setFirstNameInputError({error: false, message: ''});\r\n            setEmailInputError({error: false, message: ''});\r\n            setLangKeyInputError({error: false, message: ''});\r\n            setRolesInputError({error: true, message: t('requiredError')});\r\n        } else {\r\n            //dispatch\r\n            console.log(JSON.stringify(user));\r\n            dispatch(editUser(user));\r\n        }\r\n\r\n    }\r\n        \r\n    if(user === null ||  roles.length === 0 )\r\n        return <Loading open={true} />\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <Loading open={status === 'loading' ? true : false}></Loading>\r\n\r\n            <Collapse in={status === 'failed'}>\r\n                <Alert color=\"error\" severity=\"error\"\r\n                       sx={{mb: 2, backgroundColor: \"transparent\"}}\r\n                >\r\n                    {t(\"errorMessage\") + \".\" + error}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={editedSuccess === true}>\r\n                <Alert color=\"success\" severity=\"success\"\r\n                       sx={{mb: 2, backgroundColor: \"transparent\"}}\r\n                >\r\n                    {t(\"successMessage\")}\r\n                </Alert>\r\n            </Collapse>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Paper>\r\n                        <Toolbar>\r\n                            <IconButton\r\n                                edge=\"start\" color=\"inherit\" aria-label=\"Add User\" sx={{mr: 0.5}}\r\n                            >\r\n                                <AccountBox/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                                {t('title')}\r\n                            </Typography>\r\n                        </Toolbar>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        error={firstNameInputError.error}\r\n                                        helperText={firstNameInputError.message}\r\n                                        autoComplete=\"given-name\"\r\n                                        name=\"firstName\"\r\n                                        fullWidth\r\n                                        id=\"firstName\"\r\n                                        label={t('firstName')}\r\n                                        value={user.firstName}\r\n                                        onChange={handleFirstName}\r\n                                        autoFocus\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        error={lastNameInputError.error}\r\n                                        helperText={lastNameInputError.message}\r\n                                        fullWidth\r\n                                        id=\"lastName\"\r\n                                        label={t('lastName')}\r\n                                        onChange={handleLastName}\r\n                                        value={user.lastName}\r\n                                        name=\"lastName\"\r\n                                        autoComplete=\"family-name\"\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                 <Grid item xs={12} sm={6}>\r\n                                   <TextField\r\n                                       error={userNameInputError.error}\r\n                                       helperText={userNameInputError.message}\r\n                                       fullWidth\r\n                                       id=\"userName\"\r\n                                       label={t('userName')}\r\n                                       onChange={handleUserName}\r\n                                       value={user.userName}\r\n                                       name=\"userName\"\r\n                                       autoComplete=\"userName\"\r\n                                      variant=\"standard\"\r\n                                />\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={12} sm={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"language-label\">{t('language')}</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"language-label\"\r\n                                            id=\"language\"\r\n                                            error={langKeyInputError.error}\r\n                                            value={user.langKey}\r\n                                            label={t('language')}\r\n                                            variant=\"standard\"\r\n                                            onChange={handleLangKey}\r\n                                        >\r\n                                            {\r\n                                                languages.map(lang => (\r\n                                                    <MenuItem key={lang} value={lang}>\r\n                                                        {lang} </MenuItem>\r\n                                                ))\r\n\r\n                                            }\r\n                                        </Select>\r\n                                        <FormHelperText>{langKeyInputError.message}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <FormControl sx={{width: '100%'}}>\r\n                                        <InputLabel id=\"select-role-label\">{t(\"roles\")} </InputLabel>\r\n                                        <Select\r\n                                            id=\"multiple\"\r\n                                            multiple\r\n                                            error={rolesInputError.error}\r\n                                            value={user.roles}\r\n                                            onChange={handleSelectedRole}\r\n                                            variant=\"standard\"\r\n                                            renderValue={(selected) => (\r\n                                                <Box sx={{\r\n                                                    display: 'flex',\r\n                                                    border: 'none',\r\n                                                    flexWrap: 'wrap',\r\n                                                    gap: 0.5\r\n                                                }}>\r\n                                                    {selected.map((value) => (\r\n                                                        <Chip\r\n                                                            key={value}\r\n                                                            icon={getIconBy(value)}\r\n                                                            variant=\"outlined\"\r\n                                                            label={value}\r\n                                                        />\r\n                                                    ))}\r\n                                                </Box>\r\n                                            )}\r\n                                        >\r\n                                            {roles.map((role) => (\r\n                                                <MenuItem\r\n                                                    key={role.id}\r\n                                                    value={role.name}\r\n                                                    style={getStyles(role.name, selectedRoles, theme)}\r\n                                                >\r\n                                                    {role.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                        </Select>\r\n                                        <FormHelperText>{rolesInputError.message}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                        <Stack direction=\"row\" spacing={2}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleCancel}\r\n                            >\r\n                                {t('cancelButtonText')}\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleAccept}\r\n                            >\r\n                                {t('acceptButtonText')}\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nexport default EditUser;","import React, {useEffect, useState} from \"react\";\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    errorSelector,\r\n    getUsers, removeUser,\r\n    statusSelector,\r\n    totalItemsSelector,\r\n    usersSelector\r\n} from \"../../../core/reducers/users\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport {AddCircle, DeleteOutlined, Edit} from \"@mui/icons-material\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {Collapse, TableSortLabel} from \"@mui/material\";\r\nimport {visuallyHidden} from '@mui/utils';\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Container from \"@mui/material/Container\";\r\nimport {useNavigate} from \"react-router\";\r\n\r\n\r\nimport Loading from \"../../../../../components/loading\";\r\nimport Search from \"../../../../../components/table/search\";\r\nimport ConfirmDialog from \"../../../../../components/dialogs/confirm\";\r\nimport {accountSelector} from \"../../../../../core/reducers/authentication\";\r\n\r\nconst UsersView = (props) => {\r\n\r\n    const {t} = useTranslation(\"user\");\r\n\r\n    const columns = [\r\n        {id: 'id', label: 'ID', minWidth: 100, sort: true},\r\n        {id: 'userName', label: t('column.user'), minWidth: 100, sort: true},\r\n        {id: 'firstName', label: t('column.firstName'), minWidth: 100, sort: true},\r\n        {id: 'lastName', label: t('column.lastName'), minWidth: 100, sort: true},\r\n        {id: 'roles', label: t('column.roles'), minWidth: 100, sort: false},\r\n        {id: 'actions', label: t('column.actions'), minWidth: 100, align: 'center', sort: false}\r\n    ];\r\n\r\n    const searchOption = [t('column.user'), t('column.firstName'), t('column.lastName')];\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const error = useSelector(errorSelector);\r\n    const status = useSelector(statusSelector);\r\n    const account = useSelector(accountSelector);\r\n    const users = useSelector(usersSelector);\r\n    const totalItems = useSelector(totalItemsSelector);\r\n\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [sort, setSort] = useState({property: 'id', direction: 'asc'});\r\n    const [filter, setFilter] = useState({column: '', text: ''});\r\n    const [openConfirmDialog, setOpenConfirmDialog] = useState(false);\r\n\r\n    const [selectedUser, setSelectedUser] = React.useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n        dispatch(getUsers(filter.column, filter.text, newPage, rowsPerPage, sort));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n        dispatch(getUsers(filter.column, filter.text, 0, event.target.value, sort));\r\n    };\r\n\r\n    const handleSort = (column) => (event) => {\r\n        const isAsc = sort.direction === 'asc';\r\n        const direction = isAsc ? 'desc' : 'asc';\r\n        setSort({property: column, direction: direction});\r\n        dispatch(getUsers(filter.column, filter.text, page, rowsPerPage, sort));\r\n    };\r\n\r\n    const handleSearch = (text, option) => {\r\n\r\n        if (text === null ||\r\n            text === undefined ||\r\n            text.length === 0) {\r\n            setFilter({column: \"\", text: \"\"})\r\n            dispatch(getUsers(\"\", \"\", page, rowsPerPage, sort));\r\n\r\n        } else {\r\n            const column = columns.find(column => column.label === option);\r\n            if (column) {\r\n                setFilter({column: column.id, text: text})\r\n                dispatch(getUsers(column.id, text, page, rowsPerPage, sort));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleCloseConfirmDialog = () => {\r\n        setOpenConfirmDialog(false);\r\n    }\r\n\r\n    const handleAcceptConfirmDialog = () => {\r\n        setOpenConfirmDialog(false);\r\n        if (account.userName !== selectedUser) {\r\n            if (selectedUser !== 'admin') {\r\n                dispatch(removeUser(selectedUser, filter.column, filter.text, page, rowsPerPage, sort));\r\n\r\n            } else {\r\n                //Show error message\r\n            }\r\n        } else {\r\n            //Show error message\r\n        }\r\n    }\r\n\r\n    const handleNewUser = () => {\r\n        navigate(\"/admin/users/new\");\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            dispatch(getUsers(filter.column, filter.text, page, rowsPerPage, sort));\r\n        }, [])\r\n\r\n    return (\r\n        <Container maxWidth={false}>\r\n            <Loading open={status === 'loading' ? true : false}></Loading>\r\n            <ConfirmDialog open={openConfirmDialog} title={t('confirmDialogTitle')}\r\n                           description={t('confirmDialogDescription')} onClose={handleCloseConfirmDialog}\r\n                           onAccept={handleAcceptConfirmDialog} cancelButtonText={t('cancelButtonText')}\r\n                           acceptButtonText={t('acceptButtonText')}/>\r\n            <Collapse in={status === 'failed'}>\r\n                <Alert color=\"error\" severity=\"error\"\r\n                       sx={{mb: 2, backgroundColor: \"transparent\"}}\r\n                >\r\n                    {error}\r\n                </Alert>\r\n            </Collapse>\r\n            <Paper sx={{width: '100%', overflow: 'hidden'}}>\r\n                <Toolbar>\r\n                    <Box sx={{flexGrow: 1}}/>\r\n                    <Search onSearchHandler={handleSearch} options={searchOption}/>\r\n                    <Tooltip title={t('add')}>\r\n                        <IconButton onClick={handleNewUser} color=\"primary\">\r\n                            <AddCircle sx={{\r\n                                fontSize: 40\r\n                                }}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <TableContainer sx={{maxHeight: 440}}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {columns.map((column) => {\r\n\r\n                                    if (column.sort === true) {\r\n                                        return (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={column.align}\r\n                                                sortDirection={sort.property === column.id ? sort.direction : false}\r\n                                            >\r\n                                                <TableSortLabel\r\n                                                    active={sort.property === column.id}\r\n                                                    direction={sort.property === column.id ? sort.direction : 'asc'}\r\n                                                    onClick={handleSort(column.id)}\r\n                                                >\r\n                                                    {t(column.label)}\r\n                                                    {sort.property === column.id ? (\r\n                                                        <Box component=\"span\" sx={visuallyHidden}>\r\n                                                            {sort.direction === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                                        </Box>\r\n                                                    ) : null}\r\n                                                </TableSortLabel>\r\n                                            </TableCell>\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <TableCell\r\n                                                key={column.id}\r\n                                                align={column.align}\r\n                                                style={{minWidth: column.minWidth}}>\r\n                                                {column.label}\r\n                                            </TableCell>);\r\n                                    }\r\n                                })}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                users.map(user => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={user.userName}>\r\n                                            {columns.map((column) => {\r\n\r\n                                                if (column.id === 'actions') {\r\n                                                    return (\r\n                                                        <TableCell key={column.id} align=\"center\">\r\n                                                            <IconButton disabled={user.userName ==='admin'?true:false} sx={{ml: 2}} color=\"inherit\" onClick={() => {\r\n                                                                setSelectedUser(user.userName);\r\n                                                                navigate(\"/admin/users/\"+user.userName);\r\n\r\n                                                            }}>\r\n                                                                <Edit></Edit>\r\n                                                            </IconButton>\r\n                                                            <IconButton  disabled={user.userName ==='admin'?true:user.userName === account.userName?true:false} align=\"left\" onClick={() => {\r\n                                                                setSelectedUser(user.userName);\r\n                                                                setOpenConfirmDialog(true);\r\n\r\n                                                            }}>\r\n                                                                <DeleteOutlined color=\"secondary\"></DeleteOutlined>\r\n                                                            </IconButton>\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                }\r\n\r\n                                                const value = column.id === \"roles\" ? user[column.id].join() : user[column.id];\r\n                                                return (\r\n                                                    <TableCell key={column.id} align={column.align}>\r\n                                                        {column.format && typeof value === 'number'\r\n                                                            ? column.format(value)\r\n                                                            : value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>);\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={parseInt(totalItems)}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default UsersView;","import { Route, Routes} from \"react-router-dom\";\r\nimport React, {lazy} from \"react\";\r\nimport AdminLayout  from \"../../components/layout\";\r\nimport NewUser from \"../../pages/user/new\";\r\nimport EditUser from \"../../pages/user/edit\";\r\nimport UsersView from \"../../pages/user/view\";\r\n\r\nconst  Admin = (props) => {\r\n    return (\r\n       <Routes>\r\n                <Route path=\"users/*\" element={<AdminLayout/>}>\r\n                    <Route index element={<UsersView/>}/>\r\n                    <Route path=\"new\" element={<NewUser/>}/>\r\n                    <Route path=\":userName\" element={<EditUser/>}/>\r\n                </Route>\r\n       </Routes>\r\n    );\r\n}\r\n\r\nexport  default Admin;"],"names":["props","onClose","onAccept","description","title","open","cancelButtonText","acceptButtonText","handleClose","id","onClick","autoFocus","onCancel","valueProp","options","other","React","value","setValue","radioGroupRef","Dialog","sx","width","maxHeight","maxWidth","TransitionProps","onEntering","current","focus","DialogTitle","DialogContent","dividers","RadioGroup","ref","name","onChange","event","target","map","option","FormControlLabel","control","Radio","label","DialogActions","Button","StyledSearch","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","color","paddingLeft","transition","transitions","create","onSearchHandler","t","useTranslation","openDialog","setOpenDialog","length","selectedOption","setSelectedOption","handleSearch","debounce","Box","placeholder","inputProps","Tooltip","IconButton","FilterAlt","Container","getStyles","personName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","navigate","useNavigate","dispatch","useDispatch","useTheme","useState","error","message","firstNameInputError","setFirstNameInputError","selectedRoles","setSelectedRoles","lastNameInputError","setLastNameInputError","rolesInputError","setRolesInputError","langKeyInputError","setLangKeyInputError","userNameInputError","setUserNameInputError","firstName","lastName","userName","roles","langKey","user","setUser","useSelector","errorSelector","status","statusSelector","createSuccess","createSuccessSelector","rolesSelector","useEffect","getRoles","component","Collapse","in","Alert","severity","mb","Grid","container","item","xs","Paper","Toolbar","edge","mr","GroupAddRounded","Typography","variant","Card","CardContent","sm","TextField","helperText","autoComplete","fullWidth","FormControl","InputLabel","Select","labelId","lang","MenuItem","FormHelperText","multiple","split","renderValue","selected","border","flexWrap","gap","Chip","icon","getIconBy","role","style","Stack","direction","undefined","setEmailInputError","createUser","useParams","editedSuccess","editedSuccessSelector","currentUser","userSelector","getUser","AccountBox","console","log","JSON","stringify","editUser","columns","minWidth","sort","align","searchOption","account","accountSelector","users","usersSelector","totalItems","totalItemsSelector","page","setPage","rowsPerPage","setRowsPerPage","property","setSort","column","text","filter","setFilter","openConfirmDialog","setOpenConfirmDialog","selectedUser","setSelectedUser","handleSort","isAsc","getUsers","removeUser","overflow","flexGrow","find","AddCircle","fontSize","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","sortDirection","TableSortLabel","active","visuallyHidden","TableBody","hover","tabIndex","disabled","ml","Edit","DeleteOutlined","join","format","TablePagination","rowsPerPageOptions","count","parseInt","onPageChange","newPage","onRowsPerPageChange","path","element","index"],"sourceRoot":""}